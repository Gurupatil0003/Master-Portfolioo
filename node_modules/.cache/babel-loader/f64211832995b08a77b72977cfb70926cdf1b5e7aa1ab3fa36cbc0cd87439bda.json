{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\n\n// Note: $Shape is needed to make polymorphic withStyle refinements work correctly\n// It seems functions satisfy this type without $Shape\n// See: https://github.com/facebook/flow/issues/6784\n//\n//\n//\n//\n//\n//\nfunction driver(style, styletron) {\n  var tx = renderDeclarativeRules(style, styletron);\n  return styletron.renderStyle(tx);\n}\nfunction getInitialStyle() {\n  return {};\n}\nfunction renderDeclarativeRules(style, styletron) {\n  for (var key in style) {\n    var val = style[key];\n    if (key === \"animationName\" && typeof val !== \"string\") {\n      style.animationName = styletron.renderKeyframes(val);\n      continue;\n    }\n    if (key === \"fontFamily\" && typeof val !== \"string\") {\n      if (Array.isArray(val)) {\n        var result = \"\";\n        for (var _iterator = val, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n          var _ref;\n          if (_isArray) {\n            if (_i >= _iterator.length) break;\n            _ref = _iterator[_i++];\n          } else {\n            _i = _iterator.next();\n            if (_i.done) break;\n            _ref = _i.value;\n          }\n          var _font = _ref;\n          if (_typeof(_font) === \"object\") {\n            result += styletron.renderFontFace(_font) + \",\";\n          } else if (typeof _font === \"string\") {\n            result += _font + \",\";\n          }\n        }\n        style.fontFamily = result.slice(0, -1);\n        continue;\n      } else {\n        style.fontFamily = styletron.renderFontFace(val);\n        continue;\n      }\n    }\n    if (_typeof(val) === \"object\" && val !== null) {\n      renderDeclarativeRules(val, styletron);\n    }\n  }\n  return style;\n}\nexport { driver, getInitialStyle, renderDeclarativeRules };","map":{"version":3,"names":["driver","style","styletron","tx","renderDeclarativeRules","renderStyle","getInitialStyle","key","val","animationName","renderKeyframes","Array","isArray","result","_isArray","_iterator","_i","Symbol","iterator","_font","_ref","_typeof","renderFontFace","fontFamily","slice"],"sources":["C:\\Users\\LENOVO\\masterPortfolio\\node_modules\\styletron-standard\\src\\index.js"],"sourcesContent":["// @flow\n\nimport type {\n  Properties,\n  FontFace as FontFaceObject,\n  KeyframesObject,\n} from \"./style-types\";\n\nexport type {FontFaceObject, KeyframesObject};\n\n// Note: $Shape is needed to make polymorphic withStyle refinements work correctly\n// It seems functions satisfy this type without $Shape\n// See: https://github.com/facebook/flow/issues/6784\n//\n//\n//\n//\n//\n//\nexport type StyleObject = $Shape<{\n  ...Properties,\n  [string]: StyleObject, // Unrecognized properties are assumed to be media queries or pseudo selectors w/ nested style object. See: https://github.com/styletron/styletron-standard\n}>;\n\nexport interface StandardEngine {\n  renderStyle(style: StyleObject): string;\n  renderKeyframes(keyframes: KeyframesObject): string;\n  renderFontFace(fontFace: FontFaceObject): string;\n}\n\nexport function driver(style: StyleObject, styletron: StandardEngine): string {\n  const tx = renderDeclarativeRules(style, styletron);\n  return styletron.renderStyle(tx);\n}\n\nexport function getInitialStyle(): StyleObject {\n  return {};\n}\n\nexport function renderDeclarativeRules(\n  style: StyleObject,\n  styletron: StandardEngine,\n) {\n  for (const key in style) {\n    const val = style[key];\n    if (key === \"animationName\" && typeof val !== \"string\") {\n      style.animationName = styletron.renderKeyframes((val: any));\n      continue;\n    }\n    if (key === \"fontFamily\" && typeof val !== \"string\") {\n      if (Array.isArray(val)) {\n        let result = \"\";\n        for (const font of val) {\n          if (typeof font === \"object\") {\n            result += `${styletron.renderFontFace((font: any))},`;\n          } else if (typeof font === \"string\") {\n            result += `${font},`;\n          }\n        }\n        style.fontFamily = result.slice(0, -1);\n        continue;\n      } else {\n        style.fontFamily = styletron.renderFontFace((val: any));\n        continue;\n      }\n    }\n    if (typeof val === \"object\" && val !== null) {\n      renderDeclarativeRules(val, styletron);\n    }\n  }\n  return style;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AA8BA,SAAgBA,MAATA,CAAgBC,KAAhB,EAAoCC,SAApC,EAAuE;MACtEC,EAAA,GAAKC,sBAAA,CAAuBH,KAAvB,EAA8BC,SAA9B,CAAX;SACOA,SAAA,CAAUG,WAAV,CAAsBF,EAAtB,CAAP;;AAGF,SAAgBG,eAATA,CAAA,EAAwC;SACtC,EAAP;;AAGF,SAAgBF,sBAATA,CACLH,KADK,EAELC,SAFK,EAGL;OACK,IAAMK,GAAX,IAAkBN,KAAlB,EAAyB;QACjBO,GAAA,GAAMP,KAAA,CAAMM,GAAN,CAAZ;QACIA,GAAA,KAAQ,eAAR,IAA2B,OAAOC,GAAP,KAAe,QAA9C,EAAwD;YAChDC,aAAN,GAAsBP,SAAA,CAAUQ,eAAV,CAA2BF,GAA3B,CAAtB;;;QAGED,GAAA,KAAQ,YAAR,IAAwB,OAAOC,GAAP,KAAe,QAA3C,EAAqD;UAC/CG,KAAA,CAAMC,OAAN,CAAcJ,GAAd,CAAJ,EAAwB;YAClBK,MAAA,GAAS,EAAb;6BACmBL,GAAnB,EAAAM,QAAA,GAAAH,KAAA,CAAAC,OAAA,CAAAG,SAAA,GAAAC,EAAA,MAAAD,SAAA,GAAAD,QAAA,GAAAC,SAAA,GAAAA,SAAA,CAAAE,MAAA,CAAAC,QAAA,OAAwB;;;;;;;;;;cAAbC,KAAa,GAAAC,IAAA;cAClBC,OAAA,CAAOF,KAAP,MAAgB,QAApB,EAA8B;sBACfjB,SAAA,CAAUoB,cAAV,CAA0BH,KAA1B,CAAb;WADF,MAEO,IAAI,OAAOA,KAAP,KAAgB,QAApB,EAA8B;sBACtBA,KAAb;;;cAGEI,UAAN,GAAmBV,MAAA,CAAOW,KAAP,CAAa,CAAb,EAAgB,CAAC,CAAjB,CAAnB;;OATF,MAWO;cACCD,UAAN,GAAmBrB,SAAA,CAAUoB,cAAV,CAA0Bd,GAA1B,CAAnB;;;;QAIAa,OAAA,CAAOb,GAAP,MAAe,QAAf,IAA2BA,GAAA,KAAQ,IAAvC,EAA6C;6BACpBA,GAAvB,EAA4BN,SAA5B;;;SAGGD,KAAP"},"metadata":{},"sourceType":"module","externalDependencies":[]}